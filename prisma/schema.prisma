// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  Manager
  Admin
  Employee
}

model User {
  id            String         @id @default(cuid())
  name          String?
  role          UserRole
  email         String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  comments      Comment[]
  notifications Notification[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  tasks       Task[]
  comments    Comment[]
}

enum TaskStatus {
  Todo
  In_Progress
  Done
}

model Task {
  id          String     @id @default(cuid())
  name        String
  status      TaskStatus
  createdAt   DateTime   @default(now())
  FinishedAt  DateTime?
  user        User?      @relation(fields: [userId], references: [id])
  userId      String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade) // delete the task when the project is deleted
  projectId   String
  description String?
}

model Comment {
  id        String  @id @default(cuid())
  sender    User?   @relation(fields: [userId], references: [id])
  userId    String
  message   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // delete the task when the project is deleted
  projectId String
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
